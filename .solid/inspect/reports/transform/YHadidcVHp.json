{
  "resolvedId": "/Users/truchuynh/Projects/Personal/chat-web-client/src/components/ChatWindow.tsx",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { createSignal, onMount } from \"solid-js\";\r\nimport ChatBody, { ListElem, MessageType } from \"./ChatBody\";\r\nimport ChatFooter from \"./ChatFooter\";\r\nimport \"./ChatWindow.css\";\r\nimport { usernames } from '../testdata/data.js';\r\n\r\nenum Command {\r\n  SUBSCRIBE = 0,\r\n  UNSUBSCRIBE = 1,\r\n  SEND_MESSAGE = 2\r\n}\r\n\r\ninterface Message {\r\n  command: Command,\r\n  channel: string,\r\n  content: string\r\n}\r\n\r\ninterface Content {\r\n  username: string,\r\n  message: string\r\n}\r\n\r\nexport default function ChatWindow() {\r\n  //TODO: replace userId with correct one when auth done\r\n  let socket: WebSocket;\r\n  let containerRef: any;\r\n  const userId = Math.floor(Math.random() * 25);\r\n  const username = usernames[userId];\r\n\r\n  const [messages, setMessages] = createSignal<Array<ListElem>>([\r\n    /*   {\r\n         content: {\r\n           username: \"Admin\",\r\n           content: \"This is a message from the admin\",\r\n         },\r\n         type: MessageType.ADMIN,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Error Bot\",\r\n           content: \"This is a message from the error bot\",\r\n         },\r\n         type: MessageType.ERROR,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Eric\",\r\n           content: \"Hey! How are you?!\",\r\n         },\r\n         type: MessageType.RECEIVE,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Eric\",\r\n           content: \"Special Request Message!\",\r\n         },\r\n         type: MessageType.SPECIAL_REQUEST,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Admin\",\r\n           content: \"This is another a message from the admin\",\r\n         },\r\n         type: MessageType.ADMIN,\r\n       },*/\r\n  ]);\r\n\r\n  const addMessage = async (message: ListElem) => {\r\n    setMessages([...messages(), message]);\r\n    if (messages().length > 10) {\r\n      const tempMessages = [...messages()];\r\n      tempMessages.shift();\r\n      setMessages(tempMessages);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (msg: string) => {\r\n\r\n    const content: Content = {\r\n      username: username,\r\n      message: msg\r\n    }\r\n\r\n    const message: Message = {\r\n      command: Command.SEND_MESSAGE,\r\n      channel: \"general\",\r\n      content: JSON.stringify(content)\r\n    }\r\n\r\n    const jsonData = JSON.stringify(message);\r\n\r\n    socket.send(jsonData);\r\n\r\n    const messageData: ListElem = {\r\n      content: {\r\n        username: content.username,\r\n        content: content.message\r\n      },\r\n      type: MessageType.SEND\r\n    }\r\n\r\n    console.log(\"Sent Message\", jsonData, messageData);\r\n    addMessage(messageData);\r\n  };\r\n\r\n  onMount(async () => {\r\n    let WEBSOCKET_URL : string = process.env.WEBSOCKET_URL!;\r\n    let fullURL : string = `ws://` + WEBSOCKET_URL +`/chat?username=${username}`;\r\n    console.debug('connecting to ' + fullURL);\r\n    // Create WebSocket connection.\r\n    socket = new WebSocket(fullURL);\r\n\r\n\r\n    // Connection opened\r\n    socket.addEventListener(\"open\", (event) => {\r\n      const subscribeMessage = {\r\n        command: Command.SUBSCRIBE,\r\n        channel: \"general\"\r\n      }\r\n\r\n      const jsonData = JSON.stringify(subscribeMessage);\r\n\r\n      socket.send(jsonData);\r\n\r\n      const messageData: ListElem = {\r\n        content: {\r\n          username: \"client\"!,\r\n          content: \"...Welcome!...\"\r\n        },\r\n        type: MessageType.SPECIAL_REQUEST\r\n      }\r\n\r\n      addMessage(messageData);\r\n    });\r\n\r\n    // Listen for messages\r\n    socket.onmessage = (event) => {\r\n      const message: Message = JSON.parse(event.data);\r\n      const content: Content = JSON.parse(message.content);\r\n\r\n      if (content.username == username) {\r\n        return\r\n      }\r\n\r\n      const messageData: ListElem = {\r\n        content: {\r\n          username: content?.username!,\r\n          content: content?.message!\r\n        },\r\n        type: MessageType.RECEIVE\r\n      }\r\n\r\n      console.log(\"Message Received\", messageData)\r\n\r\n\r\n\r\n      addMessage(messageData);\r\n    };\r\n\r\n    // Listen for Closing issues\r\n    socket.onclose = function (event) {\r\n      let msg : string = \"\";\r\n      let msgType: MessageType = MessageType.SPECIAL_REQUEST;\r\n\r\n      let errorMessage = function (arg: string) {\r\n        msg = arg;\r\n        msgType = MessageType.ERROR;\r\n      };\r\n      switch (event.code) {\r\n        case 1000:\r\n          msg = \"Good Bye! Closing...\";\r\n          break;\r\n        case 1001:\r\n          errorMessage(\"connection closed due to server going down...\");\r\n          break;\r\n        case 10002:\r\n          errorMessage(\"connection closed due to protocol error\");\r\n          break;\r\n        case 10003:\r\n          errorMessage(\"connection closed due to incorrect data...\");\r\n          break;\r\n        case 1004:\r\n          errorMessage(\"rejected connection...\");\r\n          break;\r\n        case 1005:\r\n          console.log(\"no status code present\");\r\n          break;\r\n        case 1006:\r\n          errorMessage(\"closed abnormally no close control frame...\");\r\n          break;\r\n        case 1007:\r\n          errorMessage(\"connection closed due to inconsistent message type ...\");\r\n          break;\r\n        case 1008:\r\n          errorMessage(\"connection closed due to policy violated...\");\r\n          break;\r\n        case 1009:\r\n          errorMessage(\"connection closed due to message too large...\");\r\n          break;\r\n        case 1010:\r\n          errorMessage(\"connection closed due to extension not recieved...\");\r\n          break;\r\n        case 1011:\r\n          errorMessage(\"server terminating connection...\");\r\n          break;\r\n        case 1015:\r\n          errorMessage(\"failure to perform TLS handshake...\");\r\n          break;\r\n        default:\r\n          errorMessage(\"unknown error...\");\r\n          break;\r\n\r\n      }\r\n\r\n      const messageData: ListElem = {\r\n        content: {\r\n          username: \"client\",\r\n          content: msg,\r\n        },\r\n        type: msgType\r\n      }\r\n\r\n      addMessage(messageData);\r\n    }\r\n\r\n  });\r\n\r\n\r\n  return (\r\n    <div class=\"container\">\r\n      <div class=\"chat-window\">\r\n        <ChatBody msgs={messages} containerRef={containerRef} />\r\n        <ChatFooter sendMessage={sendMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "start": 1684934465340,
      "end": 1684934465340
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { getNextMarker as _$getNextMarker } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { $$component as _$$component } from \"solid-refresh\";\nimport { $$refresh as _$$refresh } from \"solid-refresh\";\nimport { $$registry as _$$registry } from \"solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"container\"><div class=\"chat-window\"><!#><!/><!#><!/>`);\nimport { createSignal, onMount } from \"solid-js\";\nimport ChatBody, { MessageType } from \"./ChatBody\";\nimport ChatFooter from \"./ChatFooter\";\nimport \"./ChatWindow.css\";\nimport { usernames } from '../testdata/data.js';\nvar Command = /*#__PURE__*/function (Command) {\n  Command[Command[\"SUBSCRIBE\"] = 0] = \"SUBSCRIBE\";\n  Command[Command[\"UNSUBSCRIBE\"] = 1] = \"UNSUBSCRIBE\";\n  Command[Command[\"SEND_MESSAGE\"] = 2] = \"SEND_MESSAGE\";\n  return Command;\n}(Command || {});\nexport default _$$component(_REGISTRY, \"ChatWindow\", function ChatWindow() {\n  //TODO: replace userId with correct one when auth done\n  let socket;\n  let containerRef;\n  const userId = Math.floor(Math.random() * 25);\n  const username = usernames[userId];\n  const [messages, setMessages] = createSignal([\n    /*   {\r\n         content: {\r\n           username: \"Admin\",\r\n           content: \"This is a message from the admin\",\r\n         },\r\n         type: MessageType.ADMIN,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Error Bot\",\r\n           content: \"This is a message from the error bot\",\r\n         },\r\n         type: MessageType.ERROR,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Eric\",\r\n           content: \"Hey! How are you?!\",\r\n         },\r\n         type: MessageType.RECEIVE,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Eric\",\r\n           content: \"Special Request Message!\",\r\n         },\r\n         type: MessageType.SPECIAL_REQUEST,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Admin\",\r\n           content: \"This is another a message from the admin\",\r\n         },\r\n         type: MessageType.ADMIN,\r\n       },*/\n  ]);\n  const addMessage = async message => {\n    setMessages([...messages(), message]);\n    if (messages().length > 10) {\n      const tempMessages = [...messages()];\n      tempMessages.shift();\n      setMessages(tempMessages);\n    }\n  };\n  const sendMessage = async msg => {\n    const content = {\n      username: username,\n      message: msg\n    };\n    const message = {\n      command: Command.SEND_MESSAGE,\n      channel: \"general\",\n      content: JSON.stringify(content)\n    };\n    const jsonData = JSON.stringify(message);\n    socket.send(jsonData);\n    const messageData = {\n      content: {\n        username: content.username,\n        content: content.message\n      },\n      type: MessageType.SEND\n    };\n    console.log(\"Sent Message\", jsonData, messageData);\n    addMessage(messageData);\n  };\n  onMount(async () => {\n    let WEBSOCKET_URL = process.env.WEBSOCKET_URL;\n    let fullURL = `ws://` + WEBSOCKET_URL + `/chat?username=${username}`;\n    console.debug('connecting to ' + fullURL);\n    // Create WebSocket connection.\n    socket = new WebSocket(fullURL);\n\n    // Connection opened\n    socket.addEventListener(\"open\", event => {\n      const subscribeMessage = {\n        command: Command.SUBSCRIBE,\n        channel: \"general\"\n      };\n      const jsonData = JSON.stringify(subscribeMessage);\n      socket.send(jsonData);\n      const messageData = {\n        content: {\n          username: \"client\",\n          content: \"...Welcome!...\"\n        },\n        type: MessageType.SPECIAL_REQUEST\n      };\n      addMessage(messageData);\n    });\n\n    // Listen for messages\n    socket.onmessage = event => {\n      const message = JSON.parse(event.data);\n      const content = JSON.parse(message.content);\n      if (content.username == username) {\n        return;\n      }\n      const messageData = {\n        content: {\n          username: content?.username,\n          content: content?.message\n        },\n        type: MessageType.RECEIVE\n      };\n      console.log(\"Message Received\", messageData);\n      addMessage(messageData);\n    };\n\n    // Listen for Closing issues\n    socket.onclose = function (event) {\n      let msg = \"\";\n      let msgType = MessageType.SPECIAL_REQUEST;\n      let errorMessage = function (arg) {\n        msg = arg;\n        msgType = MessageType.ERROR;\n      };\n      switch (event.code) {\n        case 1000:\n          msg = \"Good Bye! Closing...\";\n          break;\n        case 1001:\n          errorMessage(\"connection closed due to server going down...\");\n          break;\n        case 10002:\n          errorMessage(\"connection closed due to protocol error\");\n          break;\n        case 10003:\n          errorMessage(\"connection closed due to incorrect data...\");\n          break;\n        case 1004:\n          errorMessage(\"rejected connection...\");\n          break;\n        case 1005:\n          console.log(\"no status code present\");\n          break;\n        case 1006:\n          errorMessage(\"closed abnormally no close control frame...\");\n          break;\n        case 1007:\n          errorMessage(\"connection closed due to inconsistent message type ...\");\n          break;\n        case 1008:\n          errorMessage(\"connection closed due to policy violated...\");\n          break;\n        case 1009:\n          errorMessage(\"connection closed due to message too large...\");\n          break;\n        case 1010:\n          errorMessage(\"connection closed due to extension not recieved...\");\n          break;\n        case 1011:\n          errorMessage(\"server terminating connection...\");\n          break;\n        case 1015:\n          errorMessage(\"failure to perform TLS handshake...\");\n          break;\n        default:\n          errorMessage(\"unknown error...\");\n          break;\n      }\n      const messageData = {\n        content: {\n          username: \"client\",\n          content: msg\n        },\n        type: msgType\n      };\n      addMessage(messageData);\n    };\n  });\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$),\n      _el$2 = _el$.firstChild,\n      _el$3 = _el$2.firstChild,\n      [_el$4, _co$] = _$getNextMarker(_el$3.nextSibling),\n      _el$5 = _el$4.nextSibling,\n      [_el$6, _co$2] = _$getNextMarker(_el$5.nextSibling);\n    _$insert(_el$2, _$createComponent(ChatBody, {\n      msgs: messages,\n      containerRef: containerRef\n    }), _el$4, _co$);\n    _$insert(_el$2, _$createComponent(ChatFooter, {\n      sendMessage: sendMessage\n    }), _el$6, _co$2);\n    return _el$;\n  })();\n}, {\n  location: \"src/components/ChatWindow.tsx:24:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1684934465340,
      "end": 1684934465360,
      "order": "pre"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/components/ChatWindow.tsx\");import { template as _$template } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { getNextMarker as _$getNextMarker } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { insert as _$insert } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { $$component as _$$component } from \"/@solid-refresh\";\nimport { $$refresh as _$$refresh } from \"/@solid-refresh\";\nimport { $$registry as _$$registry } from \"/@solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"container\"><div class=\"chat-window\"><!#><!/><!#><!/>`);\nimport { createSignal, onMount } from \"/node_modules/.vite/deps/solid-js.js?v=75b0e54f\";\nimport ChatBody, { MessageType } from \"/src/components/ChatBody.tsx?t=1684934465261\";\nimport ChatFooter from \"/src/components/ChatFooter.tsx?t=1684934465260\";\nimport \"/src/components/ChatWindow.css?t=1684934465260\";\nimport { usernames } from \"/src/testdata/data.ts?t=1684934465262\";\nvar Command = /*#__PURE__*/function (Command) {\n  Command[Command[\"SUBSCRIBE\"] = 0] = \"SUBSCRIBE\";\n  Command[Command[\"UNSUBSCRIBE\"] = 1] = \"UNSUBSCRIBE\";\n  Command[Command[\"SEND_MESSAGE\"] = 2] = \"SEND_MESSAGE\";\n  return Command;\n}(Command || {});\nexport default _$$component(_REGISTRY, \"ChatWindow\", function ChatWindow() {\n  //TODO: replace userId with correct one when auth done\n  let socket;\n  let containerRef;\n  const userId = Math.floor(Math.random() * 25);\n  const username = usernames[userId];\n  const [messages, setMessages] = createSignal([\n    /*   {\r\n         content: {\r\n           username: \"Admin\",\r\n           content: \"This is a message from the admin\",\r\n         },\r\n         type: MessageType.ADMIN,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Error Bot\",\r\n           content: \"This is a message from the error bot\",\r\n         },\r\n         type: MessageType.ERROR,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Eric\",\r\n           content: \"Hey! How are you?!\",\r\n         },\r\n         type: MessageType.RECEIVE,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Eric\",\r\n           content: \"Special Request Message!\",\r\n         },\r\n         type: MessageType.SPECIAL_REQUEST,\r\n       },\r\n       {\r\n         content: {\r\n           username: \"Admin\",\r\n           content: \"This is another a message from the admin\",\r\n         },\r\n         type: MessageType.ADMIN,\r\n       },*/\n  ]);\n  const addMessage = async message => {\n    setMessages([...messages(), message]);\n    if (messages().length > 10) {\n      const tempMessages = [...messages()];\n      tempMessages.shift();\n      setMessages(tempMessages);\n    }\n  };\n  const sendMessage = async msg => {\n    const content = {\n      username: username,\n      message: msg\n    };\n    const message = {\n      command: Command.SEND_MESSAGE,\n      channel: \"general\",\n      content: JSON.stringify(content)\n    };\n    const jsonData = JSON.stringify(message);\n    socket.send(jsonData);\n    const messageData = {\n      content: {\n        username: content.username,\n        content: content.message\n      },\n      type: MessageType.SEND\n    };\n    console.log(\"Sent Message\", jsonData, messageData);\n    addMessage(messageData);\n  };\n  onMount(async () => {\n    let WEBSOCKET_URL = process.env.WEBSOCKET_URL;\n    let fullURL = `ws://` + WEBSOCKET_URL + `/chat?username=${username}`;\n    console.debug('connecting to ' + fullURL);\n    // Create WebSocket connection.\n    socket = new WebSocket(fullURL);\n\n    // Connection opened\n    socket.addEventListener(\"open\", event => {\n      const subscribeMessage = {\n        command: Command.SUBSCRIBE,\n        channel: \"general\"\n      };\n      const jsonData = JSON.stringify(subscribeMessage);\n      socket.send(jsonData);\n      const messageData = {\n        content: {\n          username: \"client\",\n          content: \"...Welcome!...\"\n        },\n        type: MessageType.SPECIAL_REQUEST\n      };\n      addMessage(messageData);\n    });\n\n    // Listen for messages\n    socket.onmessage = event => {\n      const message = JSON.parse(event.data);\n      const content = JSON.parse(message.content);\n      if (content.username == username) {\n        return;\n      }\n      const messageData = {\n        content: {\n          username: content?.username,\n          content: content?.message\n        },\n        type: MessageType.RECEIVE\n      };\n      console.log(\"Message Received\", messageData);\n      addMessage(messageData);\n    };\n\n    // Listen for Closing issues\n    socket.onclose = function (event) {\n      let msg = \"\";\n      let msgType = MessageType.SPECIAL_REQUEST;\n      let errorMessage = function (arg) {\n        msg = arg;\n        msgType = MessageType.ERROR;\n      };\n      switch (event.code) {\n        case 1000:\n          msg = \"Good Bye! Closing...\";\n          break;\n        case 1001:\n          errorMessage(\"connection closed due to server going down...\");\n          break;\n        case 10002:\n          errorMessage(\"connection closed due to protocol error\");\n          break;\n        case 10003:\n          errorMessage(\"connection closed due to incorrect data...\");\n          break;\n        case 1004:\n          errorMessage(\"rejected connection...\");\n          break;\n        case 1005:\n          console.log(\"no status code present\");\n          break;\n        case 1006:\n          errorMessage(\"closed abnormally no close control frame...\");\n          break;\n        case 1007:\n          errorMessage(\"connection closed due to inconsistent message type ...\");\n          break;\n        case 1008:\n          errorMessage(\"connection closed due to policy violated...\");\n          break;\n        case 1009:\n          errorMessage(\"connection closed due to message too large...\");\n          break;\n        case 1010:\n          errorMessage(\"connection closed due to extension not recieved...\");\n          break;\n        case 1011:\n          errorMessage(\"server terminating connection...\");\n          break;\n        case 1015:\n          errorMessage(\"failure to perform TLS handshake...\");\n          break;\n        default:\n          errorMessage(\"unknown error...\");\n          break;\n      }\n      const messageData = {\n        content: {\n          username: \"client\",\n          content: msg\n        },\n        type: msgType\n      };\n      addMessage(messageData);\n    };\n  });\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$),\n      _el$2 = _el$.firstChild,\n      _el$3 = _el$2.firstChild,\n      [_el$4, _co$] = _$getNextMarker(_el$3.nextSibling),\n      _el$5 = _el$4.nextSibling,\n      [_el$6, _co$2] = _$getNextMarker(_el$5.nextSibling);\n    _$insert(_el$2, _$createComponent(ChatBody, {\n      msgs: messages,\n      containerRef: containerRef\n    }), _el$4, _co$);\n    _$insert(_el$2, _$createComponent(ChatFooter, {\n      sendMessage: sendMessage\n    }), _el$6, _co$2);\n    return _el$;\n  })();\n}, {\n  location: \"src/components/ChatWindow.tsx:24:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1684934465360,
      "end": 1684934465360,
      "order": "normal"
    }
  ]
}
