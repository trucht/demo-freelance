{
  "resolvedId": "/Users/truchuynh/Projects/Personal/chat-web-client/src/components/ChatBody.tsx",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { For, Switch, Match, createEffect, on } from \"solid-js\";\r\nimport MessageReceive from \"./MessageReceive\";\r\nimport MessageSent from \"./MessageSent\";\r\nimport { MessageArg } from \"./MessageArg\";\r\nimport \"./ChatBody.css\";\r\nimport MessageAdmin from \"./MessageAdmin\";\r\nimport MessageError from \"./MessageError\";\r\nimport MessageRequest from \"./MessageRequest\";\r\n\r\nexport enum MessageType {\r\n  SEND,\r\n  RECEIVE,\r\n  ADMIN,\r\n  ERROR,\r\n  SPECIAL_REQUEST,\r\n}\r\n\r\nexport interface ListElem {\r\n  content: MessageArg;\r\n  type: MessageType;\r\n}\r\n\r\nexport interface ListArg {\r\n  msgs: () => Array<ListElem>;\r\n  containerRef: any;\r\n}\r\n\r\nexport default function ChatBody(props: ListArg) {\r\n  console.log(\"Messages BODY: \", props.msgs);\r\n\r\n  createEffect(\r\n    on(\r\n      () => props.msgs.length,\r\n      () => (props.containerRef.scrollTop = props.containerRef.scrollHeight)\r\n    )\r\n  );\r\n\r\n  return (\r\n    <div\r\n      class=\"chat-body\"\r\n      style={{\r\n        \"overflow-y\": \"auto\",\r\n      }}\r\n      ref={props.containerRef}\r\n    >\r\n      <ul class=\"message-list\">\r\n        <For each={props.msgs()}>\r\n          {(msg, i) => (\r\n            <Switch>\r\n              <Match when={msg.type == MessageType.SEND}>\r\n                <MessageSent {...msg.content} />\r\n              </Match>\r\n              <Match when={msg.type == MessageType.RECEIVE}>\r\n                <MessageReceive {...msg.content} />\r\n              </Match>\r\n              <Match when={msg.type == MessageType.ADMIN}>\r\n                <MessageAdmin {...msg.content} />\r\n              </Match>\r\n              <Match when={msg.type == MessageType.ERROR}>\r\n                <MessageError {...msg.content} />\r\n              </Match>\r\n              <Match when={msg.type == MessageType.SPECIAL_REQUEST}>\r\n                <MessageRequest {...msg.content} />\r\n              </Match>\r\n            </Switch>\r\n          )}\r\n        </For>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n",
      "start": 1684934465292,
      "end": 1684934465292
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { use as _$use } from \"solid-js/web\";\nimport { $$component as _$$component } from \"solid-refresh\";\nimport { $$refresh as _$$refresh } from \"solid-refresh\";\nimport { $$registry as _$$registry } from \"solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"chat-body\"><ul class=\"message-list\">`);\nimport { For, Switch, Match, createEffect, on } from \"solid-js\";\nimport MessageReceive from \"./MessageReceive\";\nimport MessageSent from \"./MessageSent\";\nimport \"./ChatBody.css\";\nimport MessageAdmin from \"./MessageAdmin\";\nimport MessageError from \"./MessageError\";\nimport MessageRequest from \"./MessageRequest\";\nexport let MessageType = /*#__PURE__*/function (MessageType) {\n  MessageType[MessageType[\"SEND\"] = 0] = \"SEND\";\n  MessageType[MessageType[\"RECEIVE\"] = 1] = \"RECEIVE\";\n  MessageType[MessageType[\"ADMIN\"] = 2] = \"ADMIN\";\n  MessageType[MessageType[\"ERROR\"] = 3] = \"ERROR\";\n  MessageType[MessageType[\"SPECIAL_REQUEST\"] = 4] = \"SPECIAL_REQUEST\";\n  return MessageType;\n}({});\nexport default _$$component(_REGISTRY, \"ChatBody\", function ChatBody(props) {\n  console.log(\"Messages BODY: \", props.msgs);\n  createEffect(on(() => props.msgs.length, () => props.containerRef.scrollTop = props.containerRef.scrollHeight));\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$),\n      _el$2 = _el$.firstChild;\n    const _ref$ = props.containerRef;\n    typeof _ref$ === \"function\" ? _$use(_ref$, _el$) : props.containerRef = _el$;\n    _el$.style.setProperty(\"overflow-y\", \"auto\");\n    _$insert(_el$2, _$createComponent(For, {\n      get each() {\n        return props.msgs();\n      },\n      children: (msg, i) => _$createComponent(Switch, {\n        get children() {\n          return [_$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.SEND;\n            },\n            get children() {\n              return _$createComponent(MessageSent, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.RECEIVE;\n            },\n            get children() {\n              return _$createComponent(MessageReceive, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.ADMIN;\n            },\n            get children() {\n              return _$createComponent(MessageAdmin, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.ERROR;\n            },\n            get children() {\n              return _$createComponent(MessageError, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.SPECIAL_REQUEST;\n            },\n            get children() {\n              return _$createComponent(MessageRequest, _$mergeProps(() => msg.content));\n            }\n          })];\n        }\n      })\n    }));\n    return _el$;\n  })();\n}, {\n  location: \"src/components/ChatBody.tsx:28:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1684934465292,
      "end": 1684934465304,
      "order": "pre"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/components/ChatBody.tsx\");import { template as _$template } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { mergeProps as _$mergeProps } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { insert as _$insert } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { use as _$use } from \"/node_modules/.vite/deps/solid-js_web.js?v=75b0e54f\";\nimport { $$component as _$$component } from \"/@solid-refresh\";\nimport { $$refresh as _$$refresh } from \"/@solid-refresh\";\nimport { $$registry as _$$registry } from \"/@solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"chat-body\"><ul class=\"message-list\">`);\nimport { For, Switch, Match, createEffect, on } from \"/node_modules/.vite/deps/solid-js.js?v=75b0e54f\";\nimport MessageReceive from \"/src/components/MessageReceive.tsx?t=1684934465261\";\nimport MessageSent from \"/src/components/MessageSent.tsx?t=1684934465261\";\nimport \"/src/components/ChatBody.css?t=1684934465259\";\nimport MessageAdmin from \"/src/components/MessageAdmin.tsx?t=1684934465260\";\nimport MessageError from \"/src/components/MessageError.tsx?t=1684934465260\";\nimport MessageRequest from \"/src/components/MessageRequest.tsx?t=1684934465261\";\nexport let MessageType = /*#__PURE__*/function (MessageType) {\n  MessageType[MessageType[\"SEND\"] = 0] = \"SEND\";\n  MessageType[MessageType[\"RECEIVE\"] = 1] = \"RECEIVE\";\n  MessageType[MessageType[\"ADMIN\"] = 2] = \"ADMIN\";\n  MessageType[MessageType[\"ERROR\"] = 3] = \"ERROR\";\n  MessageType[MessageType[\"SPECIAL_REQUEST\"] = 4] = \"SPECIAL_REQUEST\";\n  return MessageType;\n}({});\nexport default _$$component(_REGISTRY, \"ChatBody\", function ChatBody(props) {\n  console.log(\"Messages BODY: \", props.msgs);\n  createEffect(on(() => props.msgs.length, () => props.containerRef.scrollTop = props.containerRef.scrollHeight));\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$),\n      _el$2 = _el$.firstChild;\n    const _ref$ = props.containerRef;\n    typeof _ref$ === \"function\" ? _$use(_ref$, _el$) : props.containerRef = _el$;\n    _el$.style.setProperty(\"overflow-y\", \"auto\");\n    _$insert(_el$2, _$createComponent(For, {\n      get each() {\n        return props.msgs();\n      },\n      children: (msg, i) => _$createComponent(Switch, {\n        get children() {\n          return [_$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.SEND;\n            },\n            get children() {\n              return _$createComponent(MessageSent, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.RECEIVE;\n            },\n            get children() {\n              return _$createComponent(MessageReceive, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.ADMIN;\n            },\n            get children() {\n              return _$createComponent(MessageAdmin, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.ERROR;\n            },\n            get children() {\n              return _$createComponent(MessageError, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.SPECIAL_REQUEST;\n            },\n            get children() {\n              return _$createComponent(MessageRequest, _$mergeProps(() => msg.content));\n            }\n          })];\n        }\n      })\n    }));\n    return _el$;\n  })();\n}, {\n  location: \"src/components/ChatBody.tsx:28:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1684934465304,
      "end": 1684934465306,
      "order": "normal"
    }
  ]
}
